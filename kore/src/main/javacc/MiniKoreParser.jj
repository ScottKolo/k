// Copyright (c) 2015-2016 K Team. All Rights Reserved.
options {
  STATIC = false;
  UNICODE_INPUT = true;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  TOKEN_MANAGER_USES_PARSER = true;
  // FORCE_LA_CHECK = true; // Useful for development, but causes a warning in Production()
}

PARSER_BEGIN(MiniKoreParser)
package org.kframework.parser.minikore;


import org.kframework.minikore.MiniKore;
import java.io.StringReader;
import java.util.*;
import static scala.collection.JavaConversions.*;
import scala.collection.Seq;

public class MiniKoreParser {
	public static MiniKore.Definition parse(String definition) throws ParseException{
	    MiniKoreParser parser = new MiniKoreParser(new StringReader(definition));
	    return parser.parseDefinition();
	}


}
PARSER_END(MiniKoreParser)

SKIP :
{
	" "
|	"\t"
|	"\r"
|	"\n"
}

TOKEN :
{
      <LSQUARE : "[" >
    | <RSQUARE : "]" >
    | <EMPTYATT: ("[")("]") >
    | <COLON : ":">
    | <COLONCOLONEQUALS : "::=">
    | <LPAREN : "(">
    | <RPAREN : ")">
    | <MODULE : "module">
    | <ENDMODULE : "endmodule">
    | <IMPORTS: "imports">
    | <SYNTAX : "syntax">
    | <RULE : "rule">
    | <AXIOM : "axiom">
    | <TRUE : "\\true">
    | <FALSE : "\\false">
    | <AND : "\\and">
    | <OR : "\\or">
    | <NOT: "\\not">
    | <IMPLIES: "\\implies">
    | <EXISTS: "\\exists">
    | <FORALL: "\\forall">
    | <NEXT: "\\next">
    | <REWRITE: "\\rewrite">
    | <EQUAL: "\\equal">
    | <COMMA: ",">
    | <VARSTRING: (["A" - "Z"])+ (["A" - "Z", "a" - "z", "0" - "9"])*>
    | <SORT : (["A" - "Z", "a" - "z", "0" - "9"])+>
    | <SYMBOL : (["A" - "Z", "a" - "z", "0" - "9", "#"])+>
    | <ID : (["A" - "Z", "a" - "z", "0" - "9"])+>
    | <STRING : (~["\""])+>

}

MiniKore.Definition parseDefinition():
{
    Seq<MiniKore.Module> modules;
    MiniKore.Attributes att;
}
{
    (att = attributes()) (modules = modules())
    {
        return MiniKore.Definition.apply(modules, att);
    }

}

Seq<MiniKore.Module> modules():
{
    List<MiniKore.Module> modules;
    MiniKore.Module m1;
}
{
    LOOKAHEAD(2)
    (m1 = module()) (m2 = modules ())? {return m2.append(m1);}
    | (m1 = module()) {return new asScalaBuffer(ArrayList().add(m1)).toSeq();}
}


MiniKore.Attributes attributes():
{
    List<MiniKore.Pattern> patterns;
    MiniKore.Pattern p;
}
{
    LOOKAHEAD(2)
    <LSQUARE> (p = pattern()) <COMMA> (patterns = patterns())+ <RSQUARE> {return patterns.add(pattern);}
    | <LSQUARE> (p = pattern()) <RSQUARE> {return new ArrayList().add(p);}
    | <EMPTYATT> {return new ArrayList();}
}

Module module():
{
    Token id;
    String name;
    List<MiniKore.Sentence> sentences;
    MiniKore.Attribute att;
}
{
    <MODULE> (id = <ID>) (sentences = sentences()) <ENDMODULE> (att = attributes())
    {return Module.apply(id.image, sentences, att);}
}

List<MiniKore.Pattern> patterns():
{
    List<MiniKore.Pattern> patterns;
    MiniKore.Pattern pattern;
}
{
    LOOKAHEAD(2)
     (p = pattern()) <COMMA> (patterns = patterns()) {return patterns.add(pattern);}
    | p = pattern() {return new ArrayList().add(p);}
}

Pattern pattern():
{
    Token varstring;
    Token sort;
    Token symbol;
    Token string;
    List<MiniKore.Pattern> patterns;
    MiniKore.Pattern p1;
    MiniKore.Pattern p2;
}
{
    (varstring = <VARSTRING>) <COLON> (sort = <SORT>) {return MiniKore.Variable.apply(varstring.image, sort.image);}
    | LOOKAHEAD(2)
    (symbol = <SYMBOL>) <LPAREN> (patterns = patterns()) <RPAREN> {return MiniKore.Application.apply(symbol.image, patterns);}
    | (symbol = <SYMBOL>) <LPAREN> (string = <STRING>) <RPAREN> {return MiniKore.DomainValue.apply(symbol.image, string.image);}
    | <TRUE> <LPAREN> <RPAREN> {return MiniKore.True.apply();}
    | <FALSE> <LPAREN> <RPAREN> {return MiniKore.False.apply();}
    | <AND> <LPAREN> (p1 = pattern()) <COMMA> (p2 = pattern()) <RPAREN> {return MiniKore.And.apply(p1, p2);}
    | <OR> <LPAREN> (p1 = pattern()) <COMMA> (p2 = pattern()) <RPAREN> {return MiniKore.Or.apply(p1, p2);}
    | <NOT> <LPAREN> (p1 = pattern()) <RPAREN> {return MiniKore.Not.apply(p1);}
    | <IMPLIES> <LPAREN> (p1 = pattern()) <COMMA> (p2 = pattern()) <RPAREN> {return MiniKore.Implies.apply(p1, p2);}
    | <EXISTS> <LPAREN> (varstring = <VARSTRING>) (p1 = pattern()) <RPAREN> {return MiniKore.Exists.apply(varstring.image, p1);}
    | <FORALL> <LPAREN> (varstring = <VARSTRING>) (p1 = pattern()) <RPAREN> {return MiniKore.ForAll.apply(varstring.image, p1);}
    | <NEXT> <LPAREN> (p1 = pattern()) <RPAREN> {return MiniKore.Not.apply(p1);}
    | <REWRITE> <LPAREN> (p1 = pattern()) <COMMA> (p2 = pattern()) <RPAREN> {return MiniKore.Rewrite.apply(p1, p2);}
    | <EQUAL> <LPAREN> (p1 = pattern()) <COMMA> (p2 = pattern()) <RPAREN> {return MiniKore.Equal.apply(p1, p2);}
}

List<MiniKore.Sentence> sentences():
{
    List<MiniKore.Sentence> sentences;
    MiniKore.Sentence sentence;
}
{
    LOOKAHEAD(2)
      (s = sentence()) (sentences = sentences()) {return sentences.add(sentence);}
    | (s = sentence()) {return new ArrayList().add(s);}
}

MiniKore.Sentence sentence():
{
    Token name;
    Token sort;
    Token label;
    MiniKore.Attributes att;
    List<String> sorts;
    MiniKore.Pattern p;
}
{

      <IMPORTS> (name = <VARSTRING>) (att = attributes()) {return MiniKore.Import.apply(name.image, att);}
    | LOOKAHEAD(3)
    <SYNTAX> (sort = <SORT>) <COLONCOLONEQUALS> (label = <SYMBOL>) <LPAREN> (sorts = sorts()) <RPAREN> (att = attributes()) {return MiniKore.SymbolDeclaration.apply(sort.image, label.image, sorts, attributes);}
    | <SYNTAX> (sort = <SORT>) (att = attributes()) {return MiniKore.SortDeclaration.apply(sort.image, att);}
    | <RULE> (p = pattern()) (att = attributes()) {return MiniKore.Rule.apply(p, att);}
    | <AXIOM> (p = pattern()) (att = attributes()) {return MiniKore.Axiom.apply(p, att);}
}

List<String> sorts():
{
    List<String> sorts;
    Token sort;
}
{
    LOOKAHEAD(2)
      (sort = <SORT>) <COMMA> (sorts = sorts()) {return sorts.add(sort.image);}
    | (sort = <SORT>) {return new ArrayList().add(sort.image);}
}
